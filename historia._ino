/* IRremoteESP8266: IRsendDemo - demonstrates sending IR codes with IRsend.
/* IRremoteESP8266: IRsendDemo - demonstrates sending IR codes with IRsend.
 *
 * Version 1.1 January, 2019
 * Based on Ken Shirriff's IrsendDemo Version 0.1 July, 2009,
 * Copyright 2009 Ken Shirriff, http://arcfn.com
 *
 * An IR LED circuit *MUST* be connected to the ESP8266 on a pin
 * as specified by kIrLed below.
 *
 * TL;DR: The IR LED needs to be driven by a transistor for a good result.
 *
 * Suggested circuit:
 *     https://github.com/crankyoldgit/IRremoteESP8266/wiki#ir-sending
 *
 * Common mistakes & tips:
 *   * Don't just connect the IR LED directly to the pin, it won't
 *     have enough current to drive the IR LED effectively.
 *   * Make sure you have the IR LED polarity correct.
 *     See: https://learn.sparkfun.com/tutorials/polarity/diode-and-led-polarity
 *   * Typical digital camera/phones can be used to see if the IR LED is flashed.
 *     Replace the IR LED with a normal LED if you don't have a digital camera
 *     when debugging.
 *   * Avoid using the following pins unless you really know what you are doing:
 *     * Pin 0/D3: Can interfere with the boot/program mode & support circuits.
 *     * Pin 1/TX/TXD0: Any serial transmissions from the ESP8266 will interfere.
 *     * Pin 3/RX/RXD0: Any serial transmissions to the ESP8266 will interfere.
 *   * ESP-01 modules are tricky. We suggest you use a module with more GPIOs
 *     for your first time. e.g. ESP-12 etc.
 */

#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

const uint16_t kIrLed = 14;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).

IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.

// Example of data captured by IRrecvDumpV2.ino


uint16_t rawDataOn[227] = {3444, 1736,  422, 1288,  446, 1262,  448, 422,  444, 424,  446, 420,  446, 1264,  446, 422,  446, 422,  446, 1262,  448, 1262,  448, 394,  452, 1284,  448, 394,  474, 420,  448, 1262,  448, 1262,  448, 420,  448, 1262,  448, 1262,  448, 420,  448, 394,  474, 1262,  448, 420,  448, 420,  448, 1262,  448, 420,  448, 420,  448, 420,  448, 394,  474, 420,  448, 420,  448, 420,  448, 420,  448, 394,  474, 420,  446, 420,  448, 420,  448, 418,  450, 394,  472, 420,  450, 418,  448, 420,  448, 1262,  450, 420,  448, 392,  474, 1264,  446, 420,  448, 394,  474, 1262,  448, 420,  448, 394,  474, 420,  448, 420,  448, 418,  448, 420,  448, 420,  448, 1260,  450, 420,  448, 1260,  448, 420,  448, 420,  448, 418,  450, 418,  450, 418,  448, 396,  472, 1262,  450, 420,  448, 420,  448, 420,  448, 1262,  448, 418,  448, 420,  448, 420,  448, 394,  476, 418,  448, 420,  448, 420,  448, 420,  448, 420,  448, 418,  448, 418,  450, 418,  448, 418,  448, 394,  472, 420,  450, 418,  450, 418,  448, 418,  450, 418,  448, 420,  450, 418,  450, 418,  450, 418,  450, 418,  450, 420,  446, 420,  448, 418,  448, 396,  472, 420,  448, 418,  448, 418,  450, 400,  468, 418,  450, 418,  450, 1260,  448, 418,  450, 418,  450, 394,  472, 418,  450, 1260,  450, 1260,  450, 418,  450};
uint16_t rawDataOff[227] = {3470, 1710,  446, 1264,  446, 1264,  446, 422,  446, 422,  446, 422,  446, 1266,  446, 422,  446, 396,  472, 1264,  446, 1264,  446, 422,  446, 1266,  444, 422,  446, 422,  446, 1266,  444, 1266,  444, 424,  444, 1264,  446, 1266,  444, 422,  444, 424,  422, 1288,  420, 448,  444, 424,  420, 1290,  444, 424,  444, 424,  444, 424,  446, 422,  444, 422,  444, 424,  444, 422,  424, 444,  420, 448,  420, 448,  444, 424,  420, 446,  422, 446,  420, 448,  420, 424,  444, 426,  442, 448,  420, 448,  420, 448,  420, 448,  420, 1290,  420, 448,  420, 446,  420, 1264,  446, 448,  420, 448,  420, 446,  420, 448,  420, 448,  420, 448,  420, 448,  420, 1290,  420, 448,  420, 1290,  420, 448,  420, 446,  420, 448,  420, 448,  420, 448,  420, 448,  420, 1290,  420, 448,  420, 448,  420, 448,  420, 1290,  420, 424,  444, 448,  420, 448,  420, 448,  420, 448,  420, 448,  420, 448,  420, 446,  420, 448,  420, 446,  422, 422,  444, 448,  420, 448,  420, 450,  418, 448,  420, 448,  420, 422,  446, 448,  420, 448,  420, 448,  420, 448,  442, 424,  444, 424,  444, 398,  446, 448,  420, 448,  422, 446,  444, 424,  444, 422,  446, 422,  446, 424,  444, 422,  446, 398,  470, 424,  444, 1266,  444, 424,  446, 1264,  446, 1264,  446, 1264,  446, 398,  470, 1240,  470, 422,  444};

void setup() {
  irsend.begin();
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
#endif  // ESP8266
}

void loop() {
  Serial.println("a rawData capture from IRrecvDumpV2");
  irsend.sendRaw(rawDataOn, 227, 38);  // Send a raw data capture at 38kHz.
  delay(20000);
  irsend.sendRaw(rawDataOff, 227, 38);  // Send a raw data capture at 38kHz.

  delay(20000);
}




/*
 * IRremoteESP8266: IRrecvDumpV2 - dump details of IR codes with IRrecv
 * An IR detector/demodulator must be connected to the input kRecvPin.
 *
 * Copyright 2009 Ken Shirriff, http://arcfn.com
 * Copyright 2017-2019 David Conran
 *
 * Example circuit diagram:
 *  https://github.com/crankyoldgit/IRremoteESP8266/wiki#ir-receiving
 *
 * Changes:
 *   Version 1.2 October, 2020
 *     - Enable easy setting of the decoding tolerance value.
 *   Version 1.0 October, 2019
 *     - Internationalisation (i18n) support.
 *     - Stop displaying the legacy raw timing info.
 *   Version 0.5 June, 2019
 *     - Move A/C description to IRac.cpp.
 *   Version 0.4 July, 2018
 *     - Minor improvements and more A/C unit support.
 *   Version 0.3 November, 2017
 *     - Support for A/C decoding for some protocols.
 *   Version 0.2 April, 2017
 *     - Decode from a copy of the data so we can start capturing faster thus
 *       reduce the likelihood of miscaptures.
 * Based on Ken Shirriff's IrsendDemo Version 0.1 July, 2009,
 */

#include <Arduino.h>
#include <assert.h>
#include <IRrecv.h>
#include <IRremoteESP8266.h>
#include <IRac.h>
#include <IRtext.h>
#include <IRutils.h>

// ==================== start of TUNEABLE PARAMETERS ====================
// An IR detector/demodulator is connected to GPIO pin 14
// e.g. D5 on a NodeMCU board.
// Note: GPIO 16 won't work on the ESP8266 as it does not have interrupts.
const uint16_t kRecvPin = 5;

// The Serial connection baud rate.
// i.e. Status message will be sent to the PC at this baud rate.
// Try to avoid slow speeds like 9600, as you will miss messages and
// cause other problems. 115200 (or faster) is recommended.
// NOTE: Make sure you set your Serial Monitor to the same speed.
const uint32_t kBaudRate = 115200;

// As this program is a special purpose capture/decoder, let us use a larger
// than normal buffer so we can handle Air Conditioner remote codes.
const uint16_t kCaptureBufferSize = 1024;

// kTimeout is the Nr. of milli-Seconds of no-more-data before we consider a
// message ended.
// This parameter is an interesting trade-off. The longer the timeout, the more
// complex a message it can capture. e.g. Some device protocols will send
// multiple message packets in quick succession, like Air Conditioner remotes.
// Air Coniditioner protocols often have a considerable gap (20-40+ms) between
// packets.
// The downside of a large timeout value is a lot of less complex protocols
// send multiple messages when the remote's button is held down. The gap between
// them is often also around 20+ms. This can result in the raw data be 2-3+
// times larger than needed as it has captured 2-3+ messages in a single
// capture. Setting a low timeout value can resolve this.
// So, choosing the best kTimeout value for your use particular case is
// quite nuanced. Good luck and happy hunting.
// NOTE: Don't exceed kMaxTimeoutMs. Typically 130ms.
#if DECODE_AC
// Some A/C units have gaps in their protocols of ~40ms. e.g. Kelvinator
// A value this large may swallow repeats of some protocols
const uint8_t kTimeout = 50;
#else   // DECODE_AC
// Suits most messages, while not swallowing many repeats.
const uint8_t kTimeout = 15;
#endif  // DECODE_AC
// Alternatives:
// const uint8_t kTimeout = 90;
// Suits messages with big gaps like XMP-1 & some aircon units, but can
// accidentally swallow repeated messages in the rawData[] output.
//
// const uint8_t kTimeout = kMaxTimeoutMs;
// This will set it to our currently allowed maximum.
// Values this high are problematic because it is roughly the typical boundary
// where most messages repeat.
// e.g. It will stop decoding a message and start sending it to serial at
//      precisely the time when the next message is likely to be transmitted,
//      and may miss it.

// Set the smallest sized "UNKNOWN" message packets we actually care about.
// This value helps reduce the false-positive detection rate of IR background
// noise as real messages. The chances of background IR noise getting detected
// as a message increases with the length of the kTimeout value. (See above)
// The downside of setting this message too large is you can miss some valid
// short messages for protocols that this library doesn't yet decode.
//
// Set higher if you get lots of random short UNKNOWN messages when nothing
// should be sending a message.
// Set lower if you are sure your setup is working, but it doesn't see messages
// from your device. (e.g. Other IR remotes work.)
// NOTE: Set this value very high to effectively turn off UNKNOWN detection.
const uint16_t kMinUnknownSize = 12;

// How much percentage lee way do we give to incoming signals in order to match
// it?
// e.g. +/- 25% (default) to an expected value of 500 would mean matching a
//      value between 375 & 625 inclusive.
// Note: Default is 25(%). Going to a value >= 50(%) will cause some protocols
//       to no longer match correctly. In normal situations you probably do not
//       need to adjust this value. Typically that's when the library detects
//       your remote's message some of the time, but not all of the time.
const uint8_t kTolerancePercentage = kTolerance;  // kTolerance is normally 25%

// Legacy (No longer supported!)
//
// Change to `true` if you miss/need the old "Raw Timing[]" display.
#define LEGACY_TIMING_INFO false
// ==================== end of TUNEABLE PARAMETERS ====================

// Use turn on the save buffer feature for more complete capture coverage.
IRrecv irrecv(kRecvPin, kCaptureBufferSize, kTimeout, true);
decode_results results;  // Somewhere to store the results

// This section of code runs only once at start-up.
void setup() {
#if defined(ESP8266)
  Serial.begin(kBaudRate, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(kBaudRate, SERIAL_8N1);
#endif  // ESP8266
  while (!Serial)  // Wait for the serial connection to be establised.
    delay(50);
  // Perform a low level sanity checks that the compiler performs bit field
  // packing as we expect and Endianness is as we expect.
  assert(irutils::lowLevelSanityCheck() == 0);

  Serial.printf("\n" D_STR_IRRECVDUMP_STARTUP "\n", kRecvPin);
#if DECODE_HASH
  // Ignore messages with less than minimum on or off pulses.
  irrecv.setUnknownThreshold(kMinUnknownSize);
#endif  // DECODE_HASH
  irrecv.setTolerance(kTolerancePercentage);  // Override the default tolerance.
  irrecv.enableIRIn();  // Start the receiver
}

// The repeating section of the code
void loop() {
  // Check if the IR code has been received.
  if (irrecv.decode(&results)) {
    // Display a crude timestamp.
    uint32_t now = millis();
    Serial.printf(D_STR_TIMESTAMP " : %06u.%03u\n", now / 1000, now % 1000);
    // Check if we got an IR message that was to big for our capture buffer.
    if (results.overflow)
      Serial.printf(D_WARN_BUFFERFULL "\n", kCaptureBufferSize);
    // Display the library version the message was captured with.
    Serial.println(D_STR_LIBRARY "   : v" _IRREMOTEESP8266_VERSION_ "\n");
    // Display the tolerance percentage if it has been change from the default.
    if (kTolerancePercentage != kTolerance)
      Serial.printf(D_STR_TOLERANCE " : %d%%\n", kTolerancePercentage);
    // Display the basic output of what we found.
    Serial.print(resultToHumanReadableBasic(&results));
    // Display any extra A/C info if we have it.
    String description = IRAcUtils::resultAcToString(&results);
    if (description.length()) Serial.println(D_STR_MESGDESC ": " + description);
    yield();  // Feed the WDT as the text output can take a while to print.
#if LEGACY_TIMING_INFO
    // Output legacy RAW timing info of the result.
    Serial.println(resultToTimingInfo(&results));
    yield();  // Feed the WDT (again)
#endif  // LEGACY_TIMING_INFO
    // Output the results as source code
    Serial.println(resultToSourceCode(&results));
    Serial.println();    // Blank line between entries
    yield();             // Feed the WDT (again)
  }
}

/* Copyright 2017, 2018 David Conran
*
* An IR LED circuit *MUST* be connected to the ESP8266 on a pin
* as specified by kIrLed below.
*
* TL;DR: The IR LED needs to be driven by a transistor for a good result.
*
* Suggested circuit:
*     https://github.com/crankyoldgit/IRremoteESP8266/wiki#ir-sending
*
* Common mistakes & tips:
*   * Don't just connect the IR LED directly to the pin, it won't
*     have enough current to drive the IR LED effectively.
*   * Make sure you have the IR LED polarity correct.
*     See: https://learn.sparkfun.com/tutorials/polarity/diode-and-led-polarity
*   * Typical digital camera/phones can be used to see if the IR LED is flashed.
*     Replace the IR LED with a normal LED if you don't have a digital camera
*     when debugging.
*   * Avoid using the following pins unless you really know what you are doing:
*     * Pin 0/D3: Can interfere with the boot/program mode & support circuits.
*     * Pin 1/TX/TXD0: Any serial transmissions from the ESP8266 will interfere.
*     * Pin 3/RX/RXD0: Any serial transmissions to the ESP8266 will interfere.
*   * ESP-01 modules are tricky. We suggest you use a module with more GPIOs
*     for your first time. e.g. ESP-12 etc.
*/
#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <ir_Mitsubishi.h>


const uint16_t kIrLed = 14;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).
IRMitsubishi112 ac(kIrLed);  // Set the GPIO used for sending messages.

void printState() {
  // Display the settings.
  Serial.println("Mitsubishi A/C remote is in the following state:");
  Serial.printf("  %s\n", ac.toString().c_str());
  // Display the encoded IR sequence.
  unsigned char* ir_code = ac.getRaw();
  Serial.print("IR Code: 0x");
  for (uint8_t i = 0; i < kMitsubishiACStateLength; i++)
    Serial.printf("%02X", ir_code[i]);
  Serial.println();
}

void setup() {
  ac.begin();
  Serial.begin(115200);
  delay(200);

  // Set up what we want to send. See ir_Mitsubishi.cpp for all the options.
  Serial.println("Default state of the remote.");
  printState();
  Serial.println("Setting desired state for A/C.");
  ac.on();
  ac.setFan(2);
  ac.setMode(kMitsubishiAcHeat);
  ac.setTemp(21);
  //ac.setVane(kMitsubishiAcVaneAuto);
}

void loop() {
  // Now send the IR signal.
  Serial.println("Sending IR command to A/C ...");
  ac.send();
  printState();
  delay(5000);
}









/**
******************************************************
* @file Outlet.ino
* @brief Outlet
* @author FabLab Lleida
* @author Jose Martinez Molero
* @author Julian Salas Bartolome
* @version 1.0
* @date Febrero 2018
*
*
*******************************************************/

#include "ServerPic.h"
#include "IO.h"

#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <ir_Mitsubishi.h>


//----------------------------
//Variables WIFI/Servidor
//----------------------------
												//Flag para habilitar Estadisticas ( 1 Habilitado, 0 Deshabilitado )
 
 






void setup() {

  	#ifdef Debug														//Usamos el puereto serie solo para debugar	
		Serial.begin(9600);												//Si no debugamos quedan libres los pines Tx, Rx para set urilizados
		Serial.println("Iniciando........");
	#endif
	EEPROM.begin(128);													//Reservamos zona de EEPROM
	//BorraDatosEprom ( 0, 128 );										//Borramos 128 bytes empezando en la posicion 0		

  	pinMode(PinReset, INPUT);   	        							//Configuramos el pin de reset como entrada
	pinMode(PinLed, OUTPUT);	              							//configuramos el pin del led verde como salida

	EnciendeLed();


	if ( LeeByteEprom ( FlagConfiguracion ) == 0 )						//Comprobamos si el Flag de configuracion esta a 0
	{																	// y si esta
		ModoAP();														//Lo ponemos en modo AP

	}else{																//Si no esta
		if ( ClienteSTA() )												//Lo poenmos en modo STA y nos conectamos a la SSID
		{																//Si jha conseguido conectarse a ls SSID en modo STA
	        if ( ClienteServerPic () )									//Intentamos conectar a ServerPic
    		{
				CheckFirmware();    									//Comprobamos si el firmware esta actualizado a la ultima version
		    	#ifdef Debug
        			Serial.println(" ");
        			Serial.println("Conectado al servidor");
      			#endif 
      			cSalida = " " ;

				DataConfig aCfg = EpromToConfiguracion ();     							 //Leemos la configuracin de la EEprom
				char USUARIO[1+aCfg.Usuario.length()]; 
				(aCfg.Usuario).toCharArray(USUARIO, 1+1+aCfg.Usuario.length());          //Almacenamos en el array USUARIO el nombre de usuario 
				cDispositivo = USUARIO;
				char PUSH[1+aCfg.Push.length()]; 
				(aCfg.Push).toCharArray(PUSH, 1+1+aCfg.Push.length());                   //Almacenamos en el array USUARIO el nombre de usuario 
				cClientePush = PUSH;
				lHomeKit = aCfg.lHomeKit;
				lWebSocket = aCfg.lWebSocket;
				lEstadisticas = aCfg.lEstadisticas;
				lPush = aCfg.lPush;

				if ( lEstadisticas )									//Si están habilitadas las estadisticas, actualizamos el numero de inicios
				{
					GrabaVariable ("inicios", 1 + LeeVariable("inicios") );
				}

      			ApagaLed();   

    			cSalida = LeeValor();													//Arrancamos con el ultimo valor
      			if ( cSalida == "ERROR")												//Si no habia ultimo valor, arrancamos con On
      			{
      				DispositivoOn();
      			}else{																	//Si existia ultimo valor, arrancamos con el valor registrado
      				if (cSalida == "On")
      				{
      					DispositivoOn();
      				}
      				if (cSalida == "Off")
      				{
      					DispositivoOff();
      				}	

      			}	

    		}
    	}	
	}
}


void loop() {

	    long Inicio, Fin;

 		/*----------------
 		Comprobacion Reset
 		------------------*/

		TestBtnReset (PinReset);

 		/*----------------
 		Comprobacion Conexion
 		------------------*/
		if ( TiempoTest > 0 )
		{
			if ( millis() > ( nMiliSegundosTest + TiempoTest ) )			//Comprobamos si existe conexion  
			{
		        EnciendeLed();        									//Encendemos el led para indicar que se comprueba la conexion
				nMiliSegundosTest = millis();
				if ( !TestConexion(lEstadisticas) )							//Si se ha perdido la conexion
				{
					lConexionPerdida = 1;									//Ponemos el flag de perdida conexion a 1
					if ( GetDispositivo() )									//Si el dispositivo estaba a On
					{
						lEstado = 1;										//Guardamos ese estado para tenerlo en cuenta en la reconexion
						DispositivoOff();									//Ponemos a Off el dispositivo	
					}	
				}else{														//Si existe conexion
			        ApagaLed();											//Apagamos el led para indicar que se ha finalizado el test                                                                                      
					if ( lConexionPerdida )									//Comprobamos si es una reconexion ( por perdida anterior )
					{														//Si lo es
						lConexionPerdida = 0;								//Reseteamos flag de reconexion
						if ( lEstado )
						{
							DispositivoOn();
						}else{
							DispositivoOff();	
						}
						lEstado = 0;										//Reseteamos el Flag lEstado
					}	
				}	
 	   		}	
    	}
 		/*----------------
 		Comprobacion de que el PIR haya detectado movimiento
 		------------------*/
   		if (lOnOff)														//Si el PIR está habilitado
   		{

		}	
 		/*----------------
 		Analisis comandos
 		------------------*/
		oMensaje = Mensaje ();								 			//Iteractuamos con ServerPic, comprobamos si sigue conectado al servidor y si se ha recibido algun mensaje

		if ( oMensaje.lRxMensaje)										//Si se ha recibido ( oMensaje.lRsMensaje = 1)
		{
	    	#ifdef Debug				
				Serial.println(oMensaje.Remitente);						//Ejecutamos acciones
				Serial.println(oMensaje.Mensaje);
			#endif	
			FlashLed();													//Flash de led que indica que se ha recibido mensaje			
			//En este punto empieza el bloque de programa particular del dispositivo segun la utilizacion					

			if (oMensaje.Mensaje == "On")								//Si se recibe "On", se pone PinSalida a '1'
			{	
				DispositivoOn();	
				cSalida = "On";
			}
			if (oMensaje.Mensaje == "Off")								//Si se recibe "Off", se pone PinSalida a '0'
			{	
				DispositivoOff();	
				cSalida = "Off";
			}
			if (oMensaje.Mensaje == "Change")							//Si se recibe 'Change', cambia el estado de PinSalida 
			{	
				if ( GetDispositivo() )
				{
					DispositivoOff();
					cSalida = "Off";
				}else{
					DispositivoOn();
					cSalida = "On";
				}
			}
			if (oMensaje.Mensaje == "ChangeGet")						//Si se recibe 'ChangeGet', cambia el estado de PinSalida y devuelve el nuevo estado al remitente 
			{	
				if ( GetDispositivo() )
				{
					DispositivoOff();
					cSalida = "Off";
				}else{
					DispositivoOn();
					cSalida = "On";					
				}
				oMensaje.Mensaje = cSalida;								//Confeccionamos el mensaje a enviar hacia el servidor	
				oMensaje.Destinatario = oMensaje.Remitente;
				EnviaMensaje(oMensaje);									//Y lo enviamos
			}			
			if (oMensaje.Mensaje == "Get")								//Si se recibe 'Get', se devuelve el estado de PinSalida al remitente
			{	
				if ( GetDispositivo() )
				{
					cSalida = "On";
				}else{
					cSalida = "Off";
				}
				oMensaje.Mensaje = cSalida;
				oMensaje.Destinatario = oMensaje.Remitente;
				EnviaMensaje(oMensaje);	
				cSalida = String(' ');									//No ha habido cambio de estado, Vaciamos cSalida para que no se envie a WebSocket y a HomeKit 
			}	

			if ((oMensaje.Mensaje).indexOf("AAOn-:-")==0)								//Si se recibe 'Get', se devuelve el estado de PinSalida al remitente
			{

				String cValor = String(oMensaje.Mensaje).substring(  3 + String(oMensaje.Mensaje).indexOf("-:-"),  String(oMensaje.Mensaje).length() ); //Extraemos el valor TA deseado
				String cTemperatura = String(cValor).substring(0, String(cValor).indexOf("-:-"));
				cValor = String(cValor).substring(  3 + String(cValor).indexOf("-:-"),  String(cValor).length() );
				String cModo = String(cValor).substring(0, String(cValor).indexOf("-:-"));
				String cVentilador =  String(cValor).substring(3 + String(cValor).indexOf("-:-"),  String(cValor).length());
        		int nTemperatura = (cTemperatura+'\0').toInt();
				int nVentilador = (cVentilador+'\0').toInt();

				cSalida = String(' ');			
				IRMitsubishi112 ac(OutputIR);  
				ac.begin();
				delay(50);
					ac.on();
					if ( cModo == "Calor")
					{
  						ac.setMode(kMitsubishiAcHeat);
					}						
					if ( cModo == "Frio")
					{
		  				ac.setMode(kMitsubishiAcCool);
					}
  				ac.setFan(nVentilador);					
  				ac.setTemp(nTemperatura);	
				ac.send();

				while ( nRepeticiones > 0 )
				{	
					ac.send();
					delay(1000);
					nRepeticiones --;
				}	
			}	

			if (oMensaje.Mensaje == "AAOff")								//Si se recibe 'Get', se devuelve el estado de PinSalida al remitente
			{
				IRMitsubishi112 ac(OutputIR);  
				ac.begin();
				delay(50);
  				ac.off();
  				ac.setFan(2);
  				ac.setMode(kMitsubishiAcHeat);
  				ac.setTemp(21);	
				ac.send();
			}	
	 		/*----------------
 			Actualizacion ultimo valor
 			------------------*/
			if ( cSalida != String(' ') )				//Si hay cambio de estado
			{	
				EnviaValor (cSalida);					//Actualizamos ultimo valor
			}

	 		/*----------------
 			Actualizacion WebSocket
 			------------------*/
			#ifdef WebSocket
				if ( cSalida != String(' ') && lWebSocket )				//Si está habililtado WebSocket y hay cambio de estado en el dispositivo, se notifica a WebSocket
				{	
					EnviaMensajeWebSocket(cSalida);						//Actualizamos las páginas html conectadas
				}
	 		#endif

	 		/*----------------
 			Notificacion HomeKit
 			------------------*/
			#ifdef HomeKit
				if ( cSalida != String(' ') && oMensaje.Remitente != ( cDispositivo + String("_") ) && lHomeKit ) //Si está habililtadoHomeKit y hay cambio de estado en el dispositivo, se notifica a HomeKit
				{
					oMensaje.Destinatario = cDispositivo + String("_");
					oMensaje.Mensaje = cSalida;
					EnviaMensaje(oMensaje);
				}
			#endif		
			
			cSalida = String(' ');										//Limpiamos cSalida para iniciar un nuevo bucle

			if ( lEstadisticas )									 	//Si están habilitadas las estadisticas, actualizamos el numero de comandos recibidos
			{
				GrabaVariable ("comandos", 1 + LeeVariable("comandos") );
			}	

			nMiliSegundosTest = millis();		
	
		}

	    wdt_reset(); 													//Refrescamos WDT

}





/* Copyright 2019 David Conran
*
* This example code demonstrates how to use the "Common" IRac class to control
* various air conditions. The IRac class does not support all the features
* for every protocol. Some have more detailed support that what the "Common"
* interface offers, and some only have a limited subset of the "Common" options.
*
* This example code will:
* o Try to turn on, then off every fully supported A/C protocol we know of.
* o It will try to put the A/C unit into Cooling mode at 25C, with a medium
*   fan speed, and no fan swinging.
* Note: Some protocols support multiple models, only the first model is tried.
*
*/
#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRac.h>
#include <IRutils.h>

const uint16_t kIrLed = 14;  // The ESP GPIO pin to use that controls the IR LED.
IRac ac(kIrLed);  // Create a A/C object using GPIO to sending messages with.
int lInicio = 0;

void setup() {
  Serial.begin(115200);
  delay(200);

  // Set up what we want to send.
  // See state_t, opmode_t, fanspeed_t, swingv_t, & swingh_t in IRsend.h for
  // all the various options.
  ac.next.protocol = decode_type_t::DAIKIN;  // Set a protocol to use.
  ac.next.model = 1;  // Some A/Cs have different models. Try just the first.
  ac.next.mode = stdAc::opmode_t::kHeat;  // Run in cool mode initially.
  ac.next.celsius = true;  // Use Celsius for temp units. False = Fahrenheit
  ac.next.degrees = 25;  // 25 degrees.
  ac.next.fanspeed = stdAc::fanspeed_t::kMedium;  // Start the fan at medium.
  ac.next.swingv = stdAc::swingv_t::kAuto;  // Don't swing the fan up or down.
  ac.next.swingh = stdAc::swingh_t::kOff;  // Don't swing the fan left or right.
  ac.next.light = false;  // Turn off any LED/Lights/Display that we can.
  ac.next.beep = false;  // Turn off any beep from the A/C if we can.
  ac.next.econo = false;  // Turn off any economy modes if we can.
  ac.next.filter = false;  // Turn off any Ion/Mold/Health filters if we can.
  ac.next.turbo = false;  // Don't use any turbo/powerful/etc modes.
  ac.next.quiet = false;  // Don't use any quiet/silent/etc modes.
  ac.next.sleep = -1;  // Don't set any sleep time or modes.
  ac.next.clean = false;  // Turn off any Cleaning options if we can.
  ac.next.clock = -1;  // Don't set any current time if we can avoid it.
  ac.next.power = false;  // Initially start with the unit off.

  Serial.println("Try to turn on & off every supported A/C type ...");
}

void loop() {
  // For every protocol the library has ...
  /*
  for (int i = 1; i < kLastDecodeType; i++) {
    decode_type_t protocol = (decode_type_t)i;
    // If the protocol is supported by the IRac class ...
    if (ac.isProtocolSupported(protocol)) {
      Serial.println("Protocol " + String(protocol) + " / " +
                     typeToString(protocol) + " is supported.");
      ac.next.protocol = protocol;  // Change the protocol used.
      ac.next.power = true;  // We want to turn on the A/C unit.
      Serial.println("Sending a message to turn ON the A/C unit.");
      ac.sendAc();  // Have the IRac class create and send a message.
      delay(5000);  // Wait 5 seconds.
      ac.next.power = false;  // Now we want to turn the A/C off.
      Serial.println("Send a message to turn OFF the A/C unit.");
      ac.sendAc();  // Send the message.
      delay(1000);  // Wait 1 second.
    }   
  }
  */
if ( lInicio == 0 )
{
      lInicio = 1;
      Serial.println("Starting from the begining again ...");

      decode_type_t protocol = (decode_type_t)72;
      ac.next.protocol = protocol;  // Change the protocol used.
      ac.next.power = true;  // We want to turn on the A/C unit.
      ac.sendAc();  // Have the IRac class create and send a message.
}

}
/*****************************

AVATTO S06

The IR receiver use the GPIO5,
the IR emitters is on GPIO14, 
the blue LED on GPIO4
the reset button on GPIO13.


ESP8266

1mb flash

50K RAM

*******************************




/**
******************************************************
* @file Sensor.ino
* @brief Sensor para temperatura, viento, ....
* @author Julian Salas Bartolome
* @version 1.0
* @date Julio 2020
*
*
*******************************************************/
//#include <GDBStub.h>

#include "ServerPic.h"
#include "IO.h"

void setup() {

  	#ifdef Debug														//Usamos el puereto serie solo para debugar	
		Serial.begin(9600);												//Si no debugamos quedan libres los pines Tx, Rx para set urilizados
		Serial.println("Iniciando........");
	#endif
	EEPROM.begin(128);													//Reservamos zona de EEPROM
	//BorraDatosEprom ( 0, 128 );										//Borramos 128 bytes empezando en la posicion 0		

  pinMode(PinReset, INPUT);   	        							//Configuramos el pin de reset como entrada
	pinMode(PinLed, OUTPUT);	              							//configuramos el pin del led verde como salida

	EnciendeLed();


	if ( LeeByteEprom ( FlagConfiguracion ) == 0 )						//Comprobamos si el Flag de configuracion esta a 0
	{																	// y si esta
		ModoAP();														//Lo ponemos en modo AP

	}else{																//Si no esta
		if ( ClienteSTA() )												//Lo poenmos en modo STA y nos conectamos a la SSID
		{																//Si jha conseguido conectarse a ls SSID en modo STA
	        if ( ClienteServerPic () )									//Intentamos conectar a ServerPic
    		{
				CheckFirmware();    									//Comprobamos si el firmware esta actualizado a la ultima version
		    	#ifdef Debug
        			Serial.println(" ");
        			Serial.println("Conectado al servidor");
      			#endif 
      			cSalida = " " ;

				DataConfig aCfg = EpromToConfiguracion ();     							 //Leemos la configuracin de la EEprom
				char USUARIO[1+aCfg.Usuario.length()]; 
				(aCfg.Usuario).toCharArray(USUARIO, 1+1+aCfg.Usuario.length());          //Almacenamos en el array USUARIO el nombre de usuario 
				cDispositivo = USUARIO;
				char PUSH[1+aCfg.Push.length()]; 
				(aCfg.Push).toCharArray(PUSH, 1+1+aCfg.Push.length());                   //Almacenamos en el array USUARIO el nombre de usuario 
				cClientePush = PUSH;
				lHomeKit = aCfg.lHomeKit;
				lWebSocket = aCfg.lWebSocket;
				lEstadisticas = aCfg.lEstadisticas;
				lPush = aCfg.lPush;

				if ( lEstadisticas )									//Si están habilitadas las estadisticas, actualizamos el numero de inicios
				{
					GrabaVariable ("inicios", 1 + LeeVariable("inicios") );
				}

      			ApagaLed();   

    			cSalida = LeeValor();													//Arrancamos con el ultimo valor
      			if ( cSalida == "ERROR")												//Si no habia ultimo valor, arrancamos con On
      			{
      				DispositivoOn();
      			}else{																	//Si existia ultimo valor, arrancamos con el valor registrado
      				if (cSalida == "On")
      				{
      					DispositivoOn();
      				}
      				if (cSalida == "Off")
      				{
      					DispositivoOff();
      				}	

      			}	

    		}
    	}	
	}
}


void loop() {

	    long Inicio, Fin;

 		/*----------------
 		Comprobacion Reset
 		------------------*/

		TestBtnReset (PinReset);

 		/*----------------
 		Comprobacion Conexion
 		------------------*/
		if ( TiempoTest > 0 )
		{
			if ( millis() > ( nMiliSegundosTest + TiempoTest ) )			//Comprobamos si existe conexion  
			{
		        EnciendeLed();        									//Encendemos el led para indicar que se comprueba la conexion
				nMiliSegundosTest = millis();
				if ( !TestConexion(lEstadisticas) )							//Si se ha perdido la conexion
				{
					lConexionPerdida = 1;									//Ponemos el flag de perdida conexion a 1
					if ( GetDispositivo() )									//Si el dispositivo estaba a On
					{
						lEstado = 1;										//Guardamos ese estado para tenerlo en cuenta en la reconexion
						DispositivoOff();									//Ponemos a Off el dispositivo	
					}	
				}else{														//Si existe conexion
			        ApagaLed();											//Apagamos el led para indicar que se ha finalizado el test                                                                                      
					if ( lConexionPerdida )									//Comprobamos si es una reconexion ( por perdida anterior )
					{														//Si lo es
						lConexionPerdida = 0;								//Reseteamos flag de reconexion
						if ( lEstado )
						{
							DispositivoOn();
						}else{
							DispositivoOff();	
						}
						lEstado = 0;										//Reseteamos el Flag lEstado
					}	
				}	
 	   		}	
    	}
 		/*----------------
 		Comprobacion de que el PIR haya detectado movimiento
 		------------------*/
   		if (lOnOff)														//Si el PIR está habilitado
   		{

		}	
 		/*----------------
 		Analisis comandos
 		------------------*/
		oMensaje = Mensaje ();								 			//Iteractuamos con ServerPic, comprobamos si sigue conectado al servidor y si se ha recibido algun mensaje

		if ( oMensaje.lRxMensaje)										//Si se ha recibido ( oMensaje.lRsMensaje = 1)
		{
	    	#ifdef Debug				
				Serial.println(oMensaje.Remitente);						//Ejecutamos acciones
				Serial.println(oMensaje.Mensaje);
			#endif	
			FlashLed();													//Flash de led que indica que se ha recibido mensaje			
			//En este punto empieza el bloque de programa particular del dispositivo segun la utilizacion					

			if (oMensaje.Mensaje == "On")								//Si se recibe "On", se pone PinSalida a '1'
			{	
				DispositivoOn();	
				cSalida = "On";
			}
			if (oMensaje.Mensaje == "Off")								//Si se recibe "Off", se pone PinSalida a '0'
			{	
				DispositivoOff();	
				cSalida = "Off";
			}
			if (oMensaje.Mensaje == "Change")							//Si se recibe 'Change', cambia el estado de PinSalida 
			{	
				if ( GetDispositivo() )
				{
					DispositivoOff();
					cSalida = "Off";
				}else{
					DispositivoOn();
					cSalida = "On";
				}
			}
			if (oMensaje.Mensaje == "ChangeGet")						//Si se recibe 'ChangeGet', cambia el estado de PinSalida y devuelve el nuevo estado al remitente 
			{	
				if ( GetDispositivo() )
				{
					DispositivoOff();
					cSalida = "Off";
				}else{
					DispositivoOn();
					cSalida = "On";					
				}
				oMensaje.Mensaje = cSalida;								//Confeccionamos el mensaje a enviar hacia el servidor	
				oMensaje.Destinatario = oMensaje.Remitente;
				EnviaMensaje(oMensaje);									//Y lo enviamos
			}			
			if (oMensaje.Mensaje == "Get")								//Si se recibe 'Get', se devuelve el estado de PinSalida al remitente
			{	
				if ( GetDispositivo() )
				{
					cSalida = "On";
				}else{
					cSalida = "Off";
				}
				oMensaje.Mensaje = cSalida;
				oMensaje.Destinatario = oMensaje.Remitente;
				EnviaMensaje(oMensaje);	
				cSalida = String(' ');									//No ha habido cambio de estado, Vaciamos cSalida para que no se envie a WebSocket y a HomeKit 
			}	

			if ((oMensaje.Mensaje).indexOf("AAOn-:-")==0)								//Si se recibe 'Get', se devuelve el estado de PinSalida al remitente
			{

				String cValor = String(oMensaje.Mensaje).substring(  3 + String(oMensaje.Mensaje).indexOf("-:-"),  String(oMensaje.Mensaje).length() ); //Extraemos el valor TA deseado
				String cTemperatura = String(cValor).substring(0, String(cValor).indexOf("-:-"));
				cValor = String(cValor).substring(  3 + String(cValor).indexOf("-:-"),  String(cValor).length() );
				cModo = String(cValor).substring(0, String(cValor).indexOf("-:-"));
				String cVentilador =  String(cValor).substring(3 + String(cValor).indexOf("-:-"),  String(cValor).length());
        nTemperatura = (cTemperatura+'\0').toInt();
				nVentilador = (cVentilador+'\0').toInt();
        nRepeticiones = 2;
				cSalida = String(' ');			
				AAOn ( nTemperatura, cModo, nVentilador, nRepeticiones );
				
			}	

			if (oMensaje.Mensaje == "AAOff")								//Si se recibe 'Get', se devuelve el estado de PinSalida al remitente
			{
        AAOff ( nTemperatura, cModo, nVentilador, nRepeticiones );
			}	
	 		/*----------------
 			Actualizacion ultimo valor
 			------------------*/
			if ( cSalida != String(' ') )				//Si hay cambio de estado
			{	
				EnviaValor (cSalida);					//Actualizamos ultimo valor
			}

	 		/*----------------
 			Actualizacion WebSocket
 			------------------*/
			#ifdef WebSocket
				if ( cSalida != String(' ') && lWebSocket )				//Si está habililtado WebSocket y hay cambio de estado en el dispositivo, se notifica a WebSocket
				{	
					EnviaMensajeWebSocket(cSalida);						//Actualizamos las páginas html conectadas
				}
	 		#endif

	 		/*----------------
 			Notificacion HomeKit
 			------------------*/
			#ifdef HomeKit
				if ( cSalida != String(' ') && oMensaje.Remitente != ( cDispositivo + String("_") ) && lHomeKit ) //Si está habililtadoHomeKit y hay cambio de estado en el dispositivo, se notifica a HomeKit
				{
					oMensaje.Destinatario = cDispositivo + String("_");
					oMensaje.Mensaje = cSalida;
					EnviaMensaje(oMensaje);
				}
			#endif		
			
			cSalida = String(' ');										//Limpiamos cSalida para iniciar un nuevo bucle

			if ( lEstadisticas )									 	//Si están habilitadas las estadisticas, actualizamos el numero de comandos recibidos
			{
				GrabaVariable ("comandos", 1 + LeeVariable("comandos") );
			}	

			nMiliSegundosTest = millis();		
	
		}

	    wdt_reset(); 													//Refrescamos WDT

}

